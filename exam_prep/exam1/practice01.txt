1) Given unsigned int variable n, write exactly one malloc() call to dynamically allocate the exact amount of memory needed to create an array containing exactly n double values. Call this array a and be sure to properly declare this variable. Set all values in a to 1.0 and then free up the allocated memory.


2) The code below outputs several memory addresses with printf(). For each output, identify if the printed address would be a location in the heap, stack, or text/code segments of process memory.

void print_output(int n) {
  printf("Hello World: %d\n", n);
}

void main()
{
  int x = 10;
  char * s = calloc( x, sizeof( char ) );
  char * t = "Memory is fun!";
  void (*fun_ptr)(int) = &print_output;
  printf("%p\n", &x);
  printf("%p\n", s);
  printf("%p\n", t);
  printf("%p\n", fun_ptr);
  printf("%p\n", &fun_ptr);
}


3) Construct a function passin_sums() that takes 3 arguments. The first two arguments should be added and saved to the third argument **within** the function passin_sums(). See below - the value of c printed out should be 3 after returning from the function.

void passin_sums()
{
  // plz construct me
}

void main()
{
  int a = 1;
  int b = 2;
  int c = 0;
  passin_sums(&a, &b, &c);
  printf("%d\n", c); // the value printed must be 3
}


4) The cool_letters() function below is supposed to take input string s and return a new string q containing only the characters that also appear in the string v. All other characters should be ignored. For example, if s is "catsLikeDogs" then the function returns "ctsLeos". Unfortunately, the given implementation of this function is incorrect. Find and correct the three errors in the code below. Do not simply rewrite the function or change the coding style/logic used.

char* cool_letters(char* s)
{
  char* result;
  char* v = "coOlLetTErs";
  int count;
  for(int i = 0 ; i < strlen(s); i++)
    for(int j = 0 ; j < strlen(v); j++)
      if(s[i] == v[j])
        count++;
        
  result = malloc(count);
  count = 0;
  for (int i = 0; i < strlen(s); i++)
    for (int j = 0 ; j < strlen(v); j++)
      if (s[i] == v[j])
        result[count++] = s[i];
  
  return result;
}


5) We have the below data file, structured as given. Make reasonable assumptions about data types. Construct our read_data() function that takes an input argument of a filename. The function should open the file and create an array of structs, each fully containing the data on a given line. You can make no assumptions about the length of the data file, but still want to limit your total RAM usage (hint: I want you to use realloc). You can assume each line in the data file is under 256 characters. You don't need to do any error handling.

Data:
BobbyLiu M 34 5.8 180
Mehmet M 35 5.7 170
Amelia F 34 5.9 150
Zepy D 2 2.0 50
Thelma B 5 1.5 7
... 

typedef struct {
  // fill this in - make reasonable assumptions on types
} my_data;

my_data* read_data(char* filename)
{
  // allocate a struct array
  // read in data line by line
  // fill in the array
  // return it
}


6) Short answer: give four differences between C and C++.


7) Assume we have a function filesize(FILE* fp) that tells us the size of a file in bytes. What might the expected values of x and y from the code snippet below be if we assume one byte per character in an ASCII text files?

char* a = "Woo!";
FILE* fp1 = fopen("file1", "w");
FILE* fp2 = fopen("file2", "w");
fprintf(fp1, "%s", a);
fwrite(a, 1, 4, fp2);
int x = filesize(fp1);
int y = filesize(fp2);


8) Your friend Sally wrote a cool C program that encodes a secret string as a series of integers and then writes out those integers to a binary file. For example, she would encode string "hey!" within a single int as:

int a = (unsigned)'h' * 256*256*256 + (unsigned)'e' * 256*256 + (unsigned)'y' * 256 + (unsigned)'!';

After outputting a secret string to a file, Sally sends you that file and you read it in as follows (assume we have the filesize() function as above):

FILE* fp = fopen("secret", "r");
int size = filesize(fp);
char buffer[256];
fread(buffer, sizeof(char), size / sizeof(char), fp);
fclose(fp);
printf("%s", buffer);

However, the output you observe is somewhat nonsensical:

"pmocgro lur 1!ze"

Can you determine what the original secret string is and speculate on what might the issue be with Sally's program?


9) Write a function mem_dump()that dumps the contents of memory to stdout. mem_dump() should take the starting memory address to dump and the number of bytes to dump. The output of mem_dump() should be similar to the output of "hexdump -C" command. Then define char*** arr, allocate memory for all elements of this two-dimensional array of C-strings, initialize all elements with C-string literals (i.e., literal C-strings like "CompOrg rulezzz!"), and determine all memory locations that are related to this array. Use your mem_dump() to print those memory locations and verify that they indeed contain data (characters and pointers) of your array.


10) Within a Unix-like command line environment, we have a directory that contains multiple text files with a ".txt" extension. We wish to pass the contents of all of these files directory directly into program "cool_parser" via stdin. Unfortunately, we don't have the source code for cool_parse and can't modify it. It doesn't matter in which order we pass the file contents to the parse. How can we accomplish our wishes in a single command?


11) Write a shell script that creates a new directory /data/csci2500-proj/ (if this directory already exists, it should be deleted first) and copies all files and directories whose names start with an o recursively from directory proj/ in your home directory to /data/csci2500-proj/. Then the script should change ownership and permissions on all files and directories inside /data/csci2500-proj/ according to the following:
* You are the owner with full access
* Group "csci2500-proj" (which is not the primary group for you) has group ownership with permissions to read and write files but not execute them and list, add, and remove files from directories but not enter the directories
* Everyone else can only read the files and list contents of the directories.
The script should be capable of being run from any working directory.


12) Write a C program that acts as a simple shell. It repeatedly takes one line of input from stdin and executes it as a command. Each command is the name of the executable (possibly with path) followed by command line arguments that depend on the specific command. Some commands might not have any arguments. Executable name is separated from the command line arguments by at least one space. Command line arguments are separated from each other by one or more spaces. The executable may reside in any of the directories listed in the PATH environment variable.

You may assume the following:
* All commands are external (i.e., do not worry about builtin shell commands) except for a special "exit" command which exits the program.
* Spaces are only used to separate the executable name from the command line arguments and one argument from another argument. In other words, executable path/name or any command line argument may not contain spaces.
* There will be no redirection (>, <) or pipes (|) in any of the commands.


13) Consider two processors P1 and P2. P1 has clock rate 4.5GHz and a CPI of 1.5. P2 has a clock rate of 3.5GHz and a CPI of 1.0.

Calculate the number of instructions per second that each processor executes.

If each processor executes a program in 10 seconds, how many instructions does each processor execute?
